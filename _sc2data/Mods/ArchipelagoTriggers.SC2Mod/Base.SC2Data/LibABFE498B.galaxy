include "TriggerLibs/NativeLib"
include "Lib5BD4895D"

include "LibABFE498B_h"

//--------------------------------------------------------------------------------------------------
// Library: Archipelago Triggers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libABFE498B_InitLibraries () {
    libNtve_InitVariables();
    lib5BD4895D_InitVariables();
}

// Variable Initialization
bool libABFE498B_InitVariables_completed = false;

void libABFE498B_InitVariables () {
    if (libABFE498B_InitVariables_completed) {
        return;
    }

    libABFE498B_InitVariables_completed = true;

    libABFE498B_gv_aP_Triggers_isBuild = true;
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: AP_Triggers_GalaxyIncludes
//--------------------------------------------------------------------------------------------------
include "AP_Triggers_PlayerConsumer"
include "AP_Triggers_Util"

void libABFE498B_InitCustomScript () {
}

// Functions
void libABFE498B_gf_AP_Triggers_MapConfig_setMissionBuild (bool lp_build) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_isBuild = lp_build;
}

void libABFE498B_gf_AP_Triggers_MapConfig_setDifficultySetup (trigger lp_onCasual, trigger lp_onNormal, trigger lp_onHard, trigger lp_onBrutal) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_onDifficultyCasual = lp_onCasual;
    libABFE498B_gv_aP_Triggers_onDifficultyNormal = lp_onNormal;
    libABFE498B_gv_aP_Triggers_onDifficultyHard = lp_onHard;
    libABFE498B_gv_aP_Triggers_onDifficultyBrutal = lp_onBrutal;
}

void libABFE498B_gf_AP_Triggers_setDifficulty (string lp_gameSpeed, string lp_difficultyChar) {
    // Variable Declarations
    int lv_currentPlayer;
    int lv_difficulty;

    // Automatic Variable Declarations
    playergroup auto7AEE654A_g;

    // Variable Initialization
    lv_difficulty = 1;

    // Implementation
    if ((lp_difficultyChar == "C")) {
        GameSetSpeedValue(c_gameSpeedNormal);
        TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyCasual, true, false);
        lv_difficulty = 1;
    }
    else {
        if ((lp_difficultyChar == "N")) {
            GameSetSpeedValue(c_gameSpeedNormal);
            TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyNormal, true, false);
            lv_difficulty = 2;
        }
        else {
            if ((lp_difficultyChar == "H")) {
                GameSetSpeedValue(c_gameSpeedFast);
                TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyHard, true, false);
                lv_difficulty = 3;
            }
            else {
                if ((lp_difficultyChar == "B")) {
                    GameSetSpeedValue(c_gameSpeedFaster);
                    TriggerExecute(libABFE498B_gv_aP_Triggers_onDifficultyBrutal, true, false);
                    lv_difficulty = 4;
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_ABFE498B_43BB9F5E") + StringToText(lp_difficultyChar)));
                }
            }
        }
    }
    if ((lp_gameSpeed == "1")) {
        GameSetSpeedValue(c_gameSpeedSlower);
    }
    else if ((lp_gameSpeed == "2")) {
        GameSetSpeedValue(c_gameSpeedSlow);
    }
    else if ((lp_gameSpeed == "3")) {
        GameSetSpeedValue(c_gameSpeedNormal);
    }
    else if ((lp_gameSpeed == "4")) {
        GameSetSpeedValue(c_gameSpeedFast);
    }
    else if ((lp_gameSpeed == "5")) {
        GameSetSpeedValue(c_gameSpeedFaster);
    }
    auto7AEE654A_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto7AEE654A_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        PlayerSetDifficulty(lv_currentPlayer, lv_difficulty);
    }
}

void libABFE498B_gf_AP_Triggers_unlockTerranUnits (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockMarine, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockMedic, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebat, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauder, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockReaper, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockHellion, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockVulture, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliath, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondback, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTank, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivac, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockWraith, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockViking, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockBanshee, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiser, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockGhost, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectre, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockThor, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberator, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockValkyrie, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMine, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockCyclone, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory1 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerProjectileAccelerator, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerNeosteelBunker, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretTitaniumHousing, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretHellstormBatteries, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockSCVAdvancedConstruction, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockSCVDualFusionWelders, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockFireSuppressionSystem, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterOrbitalCommand, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineStimpack, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockMarineCombatShield, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicAdvancedMedicFacilities, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockMedicStabilizerMedpacks, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatIncineratorGauntlets, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockFirebatJuggernautPlating, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderConcussiveShells, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockMarauderKineticFoam, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperU238Rounds, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockReaperG4Clusterbomb, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldAccelerators, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldLaunchers, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranArmory2 (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionTwinLinkedFlamethrower, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockHellionThermiteFilaments, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockVultureCerberusMine, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockVultureReplenishableMagazine, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathMultiLockWeaponsSystem, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockGoliathAresClassTargetingSystem, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackTriLithiumPowerCell, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackShapedHull, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankMaelstromRounds, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedBlast, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacRapidDeploymentTube, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAdvancedHealingAI, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithTomahawkPowerCells, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockWraithDisplacementField, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingRipwaveMissiles, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockVikingPhobosClassWeaponsSystem, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeCrossSpectrumDampeners, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockBansheeShockwaveMissileBattery, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserMissilePods, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserDefensiveMatrix, // 19
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostOcularImplants, // 20
        libABFE498B_gf_AP_Triggers_Terran_unlockGhostCriusSuit, // 21
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectrePsionicLash, //22
        libABFE498B_gf_AP_Triggers_Terran_unlockSpectreNyxClassCloakingModule, //23
        libABFE498B_gf_AP_Triggers_Terran_unlockThor330mmBarrageCannon, //24
        libABFE498B_gf_AP_Triggers_Terran_unlockThorImmortalityProtocol, //25
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorAdvancedBallistics, //26
        libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorSiegeProtocol, //27
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineDrillingClaws, //28
        libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineConcealment //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranLaboratory (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockUltraCapacitors, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockVanadiumPlating, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalDepots, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockMicroFiletring, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockAutomatedRefinery, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterReactor, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockRaven, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockScienceVessel, // 7
        libABFE498B_gf_AP_Triggers_Terran_unlockTechReactor, // 8
        libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalStrike, // 9
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerShrikeTurret, // 10
        libABFE498B_gf_AP_Triggers_Terran_unlockBunkerFortifiedBunker, // 11
        libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterPlanetaryFortress, // 12
        libABFE498B_gf_AP_Triggers_Terran_unlockPerditionTurret, // 13
        libABFE498B_gf_AP_Triggers_Terran_unlockPredator, // 14
        libABFE498B_gf_AP_Triggers_Terran_unlockHercules, // 15
        libABFE498B_gf_AP_Triggers_Terran_unlockCellularReactor, // 16
        libABFE498B_gf_AP_Triggers_Terran_unlockRegenerativeBioSteel, // 17
        libABFE498B_gf_AP_Triggers_Terran_unlockHiveMindEmulator, // 18
        libABFE498B_gf_AP_Triggers_Terran_unlockPsiDisrupter, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranMercenaries (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockWarPigs, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockDevilDogs, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockHammerSecurities, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockSpartanCompany, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockSiegeBreakers, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockHelsAngel, // 5
        libABFE498B_gf_AP_Triggers_Terran_unlockDuskWings, // 6
        libABFE498B_gf_AP_Triggers_Terran_unlockJacksonsRevenge, // 7
        ap_triggers_PlayerConsumer_sig, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranBuildings (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processBitsInBitArray(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockBunker, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurret, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockSensorTower, // 2
        ap_triggers_PlayerConsumer_sig, // 3
        ap_triggers_PlayerConsumer_sig, // 4
        ap_triggers_PlayerConsumer_sig, // 5
        ap_triggers_PlayerConsumer_sig, // 6
        ap_triggers_PlayerConsumer_sig, // 7
        ap_triggers_PlayerConsumer_sig, // 8
        ap_triggers_PlayerConsumer_sig, // 9
        ap_triggers_PlayerConsumer_sig, // 10
        ap_triggers_PlayerConsumer_sig, // 11
        ap_triggers_PlayerConsumer_sig, // 12
        ap_triggers_PlayerConsumer_sig, // 13
        ap_triggers_PlayerConsumer_sig, // 14
        ap_triggers_PlayerConsumer_sig, // 15
        ap_triggers_PlayerConsumer_sig, // 16
        ap_triggers_PlayerConsumer_sig, // 17
        ap_triggers_PlayerConsumer_sig, // 18
        ap_triggers_PlayerConsumer_sig, // 19
        ap_triggers_PlayerConsumer_sig, // 20
        ap_triggers_PlayerConsumer_sig, // 21
        ap_triggers_PlayerConsumer_sig, //22
        ap_triggers_PlayerConsumer_sig, //23
        ap_triggers_PlayerConsumer_sig, //24
        ap_triggers_PlayerConsumer_sig, //25
        ap_triggers_PlayerConsumer_sig, //26
        ap_triggers_PlayerConsumer_sig, //27
        ap_triggers_PlayerConsumer_sig, //28
        ap_triggers_PlayerConsumer_sig //29
    );
}

void libABFE498B_gf_AP_Triggers_unlockTerranUpgrades (int lp_player, int lp_bitArrayValue) {
    // Automatic Variable Declarations
    // Implementation
    // Yeah, this must be done in Galaxy
    ap_triggers_processUpgrades(
        lp_player,
        lp_bitArrayValue,
        libABFE498B_gf_AP_Triggers_Terran_unlockInfantryWeapon, // 0
        libABFE498B_gf_AP_Triggers_Terran_unlockInfantryArmor, // 1
        libABFE498B_gf_AP_Triggers_Terran_unlockVehicleWeapon, // 2
        libABFE498B_gf_AP_Triggers_Terran_unlockVehicleArmor, // 3
        libABFE498B_gf_AP_Triggers_Terran_unlockShipWeapon, // 4
        libABFE498B_gf_AP_Triggers_Terran_unlockShipArmor // 5
    );
}

bool libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock () {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gv_aP_Triggers_isBuild == true)) {
        if (((libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 2) || (libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 3))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        if (((libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 1) || (libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch == 3))) {
            return true;
        }
        else {
            return false;
        }
    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Marine", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedic (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libABFE498B_gv_aP_Triggers_Terran_hasMedic[lp_player] = true;
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    if ((libABFE498B_gv_aP_Triggers_Terran_hasAdvancedMedicFacilities[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    }
    else {
        TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    }
    TechTreeUnitAllow(lp_player, "AP_Medic", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Firebat", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauder (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Marauder", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaper (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Reaper", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Hellion", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVulture (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Vulture", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondback (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Diamondback", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliath (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Goliath", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_SiegeTank", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivac (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Medivac", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraith (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Wraith", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockViking (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    TechTreeUnitAllow(lp_player, "AP_VikingFighter", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBanshee (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Banshee", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiser (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_FusionCore", true);
    TechTreeUnitAllow(lp_player, "AP_Battlecruiser", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhost (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", true);
    TechTreeUnitAllow(lp_player, "AP_Ghost", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectre (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", true);
    TechTreeUnitAllow(lp_player, "AP_Spectre", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Armory", true);
    TechTreeUnitAllow(lp_player, "AP_Thor", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRaven (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Raven", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockScienceVessel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_ScienceVessel", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPredator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Predator", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHercules (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_FusionCore", true);
    TechTreeUnitAllow(lp_player, "AP_Hercules", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", true);
    TechTreeUnitAllow(lp_player, "AP_Liberator", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrie (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Starport", true);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_ValkyrieSCBW", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", true);
    TechTreeUnitAllow(lp_player, "AP_WidowMine", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCyclone (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Factory", true);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", true);
    TechTreeUnitAllow(lp_player, "AP_Cyclone", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWarPigs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_WarPig", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDevilDogs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_DevilDog", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHammerSecurities (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_HammerSecurity", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpartanCompany (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_SpartanCompany", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeBreakers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_SiegeBreaker", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHelsAngel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_HelsAngelFighter", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDuskWings (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_DuskWing", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockJacksonsRevenge (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_MercCompound", true);
    TechTreeUnitAllow(lp_player, "AP_DukesRevenge", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Barracks", true);
    TechTreeUnitAllow(lp_player, "AP_Bunker", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_MissileTurret", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSensorTower (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_SensorTower", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPerditionTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_PerditionTurret", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockPsiDisrupter (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_PsiDisruptor", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHiveMindEmulator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeUnitAllow(lp_player, "AP_HiveMindEmulator", true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSCVAdvancedConstruction (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedConstruction", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSCVDualFusionWelders (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DualFusionWelders", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineStimpack (int lp_player) {
    // Automatic Variable Declarations
    // Deprecated
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MarineStimpack", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineCombatShield (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CombatShield", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MarineStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackMarine", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemMarine", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarineMagRailMunitions (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagrailMunitionsMarine", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicAdvancedMedicFacilities (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedMedicTraining", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasAdvancedMedicFacilities[lp_player] = true;
    if ((libABFE498B_gv_aP_Triggers_Terran_hasMedic[lp_player] == true)) {
        TechTreeUnitAllow(lp_player, "AP_BarracksReactor", true);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicStabilizerMedpacks (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_StabilizerMedPacks", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicRestoration (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedicSCBWRestorationResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedicOpticalFlare (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedicSCBWOpticFlareResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatIncineratorGauntlets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BearclawNozzles", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatJuggernautPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FirebatJuggernautPlating", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFirebatProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackFirebat", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FirebatStimpack", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderConcussiveShells (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_JackhammerConcussionGrenades", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderKineticFoam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MarauderLifeBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MarauderStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackMarauder", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemMarauder", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMarauderMagRailMunitions (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagrailMunitionsMarauder", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperU238Rounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperU238Rounds", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperG4Clusterbomb (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ClusterBomb", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackReaper", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemReaper", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperAdvancedCloakingField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyReaper", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperSpiderMines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReaperSpiderMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockReaperCombatDrugs (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CombatDrugs", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionTwinLinkedFlamethrower (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TwinLinkedFlameThrowers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionThermiteFilaments (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellionCampaignInfernalPreIgniter", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionHellbatAspect (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellbatAspect", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellionSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosHellion", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellbatJumpJets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HoverHellbat", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockHellbatProgressiveStimpack (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HellbatStimpack", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackHellbat", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockVultureCerberusMine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CerberusMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVultureReplenishableMagazine (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NanoConstructor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathMultiLockWeaponsSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultilockTargetingSystems", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathAresClassTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AresClassWeaponsSystem", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGoliathJumpJets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GoliathJumpJet", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackTriLithiumPowerCell (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TriLithiumPowerCells", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockDiamondbackShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankMaelstromRounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MaelstromRounds", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankShapedBlast (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTankShapedBlast", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankJumpJets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HoverSiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankSpiderMines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeSpiderMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosSiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankGraduatingRange (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTankSiegeModeProgressiveRangeIncease", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemSiegeTank", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSiegeTankAdvancedSiegeTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RaynorImprovedSiegeMode", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacRapidDeploymentTube (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacRapidDeployment", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAdvancedHealingAI (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedHealingAI", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacExpandedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ExpandedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMedivacAfterburners (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MedivacSpeedBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithTomahawkPowerCells (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DynamicPowerRouting", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithDisplacementField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakDistortionField", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWraithAdvancedLaserTechnology (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WraithAdvancedLaserTechnology", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingRipwaveMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HALORockets", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingPhobosClassWeaponsSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AresClassWeaponsSystemViking", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosViking", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVikingMagrailMunitions (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VikingMagWeapon", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeCrossSpectrumDampeners (int lp_player) {
    // Automatic Variable Declarations
    // Deprecated
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CrossSpectrumDampeners", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeShockwaveMissileBattery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ClusterWarheads", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeProgressiveCrossSpectrumDampeners (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CrossSpectrumDampeners", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakBanshee", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeHyperflightRotors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeSpeed", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBansheeLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemBanshee", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserMissilePods (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HurricaneMissiles", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserDefensiveMatrix (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DefensiveMatrix", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserTacticalJump (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TacticalJump", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserCloak (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyBattlecruiser", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBattlecruiserATXLaserBattery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedWeaponryBattlecruiser", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostOcularImplants (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OcularImplants", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostCriusSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakGhost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostEMPRounds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_EMP", 0), true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockGhostLockdown (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_GhostSCBWLockdownResearch", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectrePsionicLash (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_UltrasonicPulse", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockSpectreNyxClassCloakingModule (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_PermanentCloakSpectre", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThor330mmBarrageCannon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_330mmBarrageCannons", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorImmortalityProtocol (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MechanicalRebirth", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorHighImpactPayload (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ThorMorph", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockThorHighSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosThor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenBioMechanicalReapirDrone (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenBioMechanicalRepairDrone", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenSpiderMines (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenSpiderMines", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenRailgunTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagrailMunitionsRaven", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenHunterSeekerWeapon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AdvancedWeaponryRaven", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenInterferenceMatrix (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenInterferenceMatrix", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockRavenAntiArmorMissile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RavenAntiArmorMissile", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldAccelerators (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CycloneLockOnDamageUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCycloneMagFieldLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MagFieldLaunchers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorAdvancedBallistics (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LiberatorAGRangeUpgrade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorSiegeProtocol (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LiberatorSiegeProtocol", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorCloak (int lp_player) {
    // Variable Declarations
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto71AE7102_g;
    int auto71AE7102_u;
    unitgroup auto605CC692_g;
    int auto605CC692_u;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CloakingTechnologyLiberator", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_CellularReactors", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsLiberator", 1);
    }

    auto71AE7102_g = UnitGroup("AP_Liberator", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71AE7102_u = UnitGroupCount(auto71AE7102_g, c_unitCountAll);
    for (;; auto71AE7102_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto71AE7102_g, auto71AE7102_u);
        if (lv_currentUnit == null) { break; }
        UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
    }
    auto605CC692_g = UnitGroup("AP_LiberatorAG", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto605CC692_u = UnitGroupCount(auto605CC692_g, c_unitCountAll);
    for (;; auto605CC692_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto605CC692_g, auto605CC692_u);
        if (lv_currentUnit == null) { break; }
        UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorSmartServos (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MultiTaskMAFServosLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockLiberatorLaserTargetingSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_LaserTargetingSystemLiberator", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineDrillingClaws (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_DrillClaws", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineConcealment (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ImprovedConcealment", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineBlackMarketLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHWidowMineBurrowedRange", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockWidowMineExecutionerMissiles (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HHWidowMineDeathBlossom", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieEnhancedCluserLaunchers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieEnhancedClusterLaunchers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieShapedHull (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieShapedHull", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieBurstLasers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieBurstLasers", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockValkyrieAfterburners (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ValkyrieSpeedBoost", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerProjectileAccelerator (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ProjectileAccelerators", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerNeosteelBunker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NeoSteelFrame", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerShrikeTurret (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ShrikeTurret", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasShrikeTurret[lp_player] = true;
    if ((libABFE498B_gv_aP_Triggers_Terran_hasFortifiedBunker[lp_player] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NeoSteelAndShrikeTurretIconUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockBunkerFortifiedBunker (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FortifiedBunkerCarapace", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasFortifiedBunker[lp_player] = true;
    if ((libABFE498B_gv_aP_Triggers_Terran_hasShrikeTurret[lp_player] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NeoSteelAndShrikeTurretIconUpgrade", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretTitaniumHousing (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_ReinforcedSuperstructure", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMissileTurretHellstormBatteries (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_HailstormMissilePods", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterOrbitalCommand (int lp_player) {
    // Variable Declarations
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto40FA63AB_g;
    int auto40FA63AB_u;
    unitgroup autoFFE3B125_g;
    int autoFFE3B125_u;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OrbitalRelay", 1);
    auto40FA63AB_g = UnitGroup("AP_CommandCenter", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto40FA63AB_u = UnitGroupCount(auto40FA63AB_g, c_unitCountAll);
    for (;; auto40FA63AB_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto40FA63AB_g, auto40FA63AB_u);
        if (lv_currentUnit == null) { break; }
        UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
    }
    autoFFE3B125_g = UnitGroup("AP_CommandCenterFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFFE3B125_u = UnitGroupCount(autoFFE3B125_g, c_unitCountAll);
    for (;; autoFFE3B125_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoFFE3B125_g, autoFFE3B125_u);
        if (lv_currentUnit == null) { break; }
        UnitSetPropertyFixed(lv_currentUnit, c_unitPropEnergy, 50.0);
    }
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CommandCenterReactor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCommandCenterPlanetaryFortress (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToPlanetaryFortress", 0), true);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockInfantryArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryArmorsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranInfantryArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockInfantryWeapon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranInfantryWeaponsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_EngineeringBay", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranInfantryWeaponLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVehicleArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleArmorsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Factory", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranVehicleArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVehicleWeapon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranVehicleWeaponsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Factory", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranVehicleArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockShipArmor (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipArmorsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Starport", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranShipArmorLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockShipWeapon (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((libABFE498B_gf_AP_Triggers_isGenericUpgradeAutoUnlock() == true)) {
        if ((libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] == true)) {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel3", 1);
                    }

                }

            }

        }
        else {
            if ((lp_level >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel1", 1);
                if ((lp_level >= 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel2", 1);
                    if ((lp_level >= 3)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TerranShipWeaponsLevel3", 1);
                    }

                }

            }

        }
    }
    else {
        if ((lp_level >= 1)) {
            TechTreeUnitAllow(lp_player, "AP_Starport", true);
            TechTreeUnitAllow(lp_player, "AP_Armory", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel1", true);
            TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel1", true);
            if ((lp_level >= 2)) {
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel2", true);
                TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel2", true);
                if ((lp_level >= 3)) {
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel3", true);
                    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel3", true);
                }

            }

        }

    }
    libABFE498B_gv_aP_Triggers_Terran_terranShipWeaponLevel[lp_player] = lp_level;
}

void libABFE498B_gf_AP_Triggers_Terran_unlockFireSuppressionSystem (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_FireSuppressionSystems", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockUltraCapacitors (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_UltraCapacitors", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasUltraCapacitors[lp_player] = true;
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel1", "AP_TerranInfantryWeaponsUltraCapacitorsLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel2", "AP_TerranInfantryWeaponsUltraCapacitorsLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryWeaponsLevel3", "AP_TerranInfantryWeaponsUltraCapacitorsLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel1", "AP_TerranVehicleWeaponsUltraCapacitorsLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel2", "AP_TerranVehicleWeaponsUltraCapacitorsLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleWeaponsLevel3", "AP_TerranVehicleWeaponsUltraCapacitorsLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel1", "AP_TerranShipWeaponsUltraCapacitorsLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel2", "AP_TerranShipWeaponsUltraCapacitorsLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipWeaponsLevel3", "AP_TerranShipWeaponsUltraCapacitorsLevel3");
}

void libABFE498B_gf_AP_Triggers_Terran_unlockVanadiumPlating (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_VanadiumPlating", 1);
    libABFE498B_gv_aP_Triggers_Terran_hasVanadiumPlating[lp_player] = true;
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel1", "AP_TerranInfantryArmorsVanadiumPlatingLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel2", "AP_TerranInfantryArmorsVanadiumPlatingLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranInfantryArmorsLevel3", "AP_TerranInfantryArmorsVanadiumPlatingLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel1", "AP_TerranVehicleArmorsVanadiumPlatingLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel2", "AP_TerranVehicleArmorsVanadiumPlatingLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranVehicleArmorsLevel3", "AP_TerranVehicleArmorsVanadiumPlatingLevel3");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel1", "AP_TerranShipArmorsVanadiumPlatingLevel1");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel2", "AP_TerranShipArmorsVanadiumPlatingLevel2");
    libABFE498B_gf_AP_Triggers_replaceUpgrade(lp_player, "AP_TerranShipArmorsLevel3", "AP_TerranShipArmorsVanadiumPlatingLevel3");
}

void libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalDepots (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SupplyDepotDrop", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockMicroFiletring (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_MicroFiltering", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockAutomatedRefinery (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_AutoHarvester", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockTechReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_TechReactor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockOrbitalStrike (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_OrbitalStrike", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockCellularReactor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactors", 1);
    if ((TechTreeUpgradeCount(lp_player, "AP_CloakingTechnologyLiberator", c_techCountQueuedOrBetter) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_CellularReactorsLiberator", 1);
    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockRegenerativeBioSteel (int lp_player) {
    // Automatic Variable Declarations
    // Deprecated
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RegenerativeBioSteel", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockProgressiveRegenerativeBioSteel (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RegenerativeBioSteel", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_RegenerativeBioSteelLevel2", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGhostVisor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaHelmetGhostVisor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaRangefinderOculus (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaHelmetRangefinderOculus", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaDomination (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaHelmetDominationVisor", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaProgressiveCloak (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaCloak", 1);
        if ((lp_level >= 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorStealthSuit", 1);
        }

    }

}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaBlink (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorBlinkSuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaApolloSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorApolloInfantrySuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaArmoredSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmoredSuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaJumpSuit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaArmorJumpSuit", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponC20ACanisterRifle (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponCanisterRifle", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponHellfireShotgun (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponHellfireShotgun", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponPlasmaRifle (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponPlasmaRifle", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponMonomolecularBlade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponPsiBlade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaWeaponBlazefireBlade (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaWeaponBlazefireBlade", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetStimInfusion (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SuperStimpackNova", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetPulseGrenades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetPulseGrenades", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetFlashbangGrenades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetFlashBangGrenades", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetIonicForceField (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetPersonalDefensiveMatrix", 1);
}

void libABFE498B_gf_AP_Triggers_Terran_unlockNovaGadgetHoloDecoy (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaGadgetHolographicDecoy", 1);
}

void libABFE498B_gf_AP_Triggers_clearTerranTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitAllow(lp_player, "AP_Marine", false);
    TechTreeUnitAllow(lp_player, "AP_Medic", false);
    TechTreeUnitAllow(lp_player, "AP_Firebat", false);
    TechTreeUnitAllow(lp_player, "AP_Marauder", false);
    TechTreeUnitAllow(lp_player, "AP_Reaper", false);
    TechTreeUnitAllow(lp_player, "AP_Hellion", false);
    TechTreeUnitAllow(lp_player, "AP_Vulture", false);
    TechTreeUnitAllow(lp_player, "AP_Goliath", false);
    TechTreeUnitAllow(lp_player, "AP_Diamondback", false);
    TechTreeUnitAllow(lp_player, "AP_SiegeTank", false);
    TechTreeUnitAllow(lp_player, "AP_Medivac", false);
    TechTreeUnitAllow(lp_player, "AP_Wraith", false);
    TechTreeUnitAllow(lp_player, "AP_VikingFighter", false);
    TechTreeUnitAllow(lp_player, "AP_Banshee", false);
    TechTreeUnitAllow(lp_player, "AP_Battlecruiser", false);
    TechTreeUnitAllow(lp_player, "AP_Ghost", false);
    TechTreeUnitAllow(lp_player, "AP_Spectre", false);
    TechTreeUnitAllow(lp_player, "AP_Thor", false);
    TechTreeUnitAllow(lp_player, "AP_Raven", false);
    TechTreeUnitAllow(lp_player, "AP_ScienceVessel", false);
    TechTreeUnitAllow(lp_player, "AP_Predator", false);
    TechTreeUnitAllow(lp_player, "AP_Hercules", false);
    TechTreeUnitAllow(lp_player, "AP_Liberator", false);
    TechTreeUnitAllow(lp_player, "AP_ValkyrieSCBW", false);
    TechTreeUnitAllow(lp_player, "AP_WidowMine", false);
    TechTreeUnitAllow(lp_player, "AP_Cyclone", false);
    TechTreeUnitAllow(lp_player, "AP_WarPig", false);
    TechTreeUnitAllow(lp_player, "AP_DevilDog", false);
    TechTreeUnitAllow(lp_player, "AP_HammerSecurity", false);
    TechTreeUnitAllow(lp_player, "AP_SpartanCompany", false);
    TechTreeUnitAllow(lp_player, "AP_SiegeBreaker", false);
    TechTreeUnitAllow(lp_player, "AP_HelsAngelFighter", false);
    TechTreeUnitAllow(lp_player, "AP_DuskWing", false);
    TechTreeUnitAllow(lp_player, "AP_DukesRevenge", false);
    TechTreeUnitAllow(lp_player, "AP_Barracks", false);
    TechTreeUnitAllow(lp_player, "AP_EngineeringBay", false);
    TechTreeUnitAllow(lp_player, "AP_PerditionTurret", false);
    TechTreeUnitAllow(lp_player, "AP_PsiDisruptor", false);
    TechTreeUnitAllow(lp_player, "AP_Bunker", false);
    TechTreeUnitAllow(lp_player, "AP_MissileTurret", false);
    TechTreeUnitAllow(lp_player, "AP_SensorTower", false);
    TechTreeUnitAllow(lp_player, "AP_HiveMindEmulator", false);
    TechTreeUnitAllow(lp_player, "AP_GhostAcademy", false);
    TechTreeUnitAllow(lp_player, "AP_MercCompound", false);
    TechTreeUnitAllow(lp_player, "AP_Factory", false);
    TechTreeUnitAllow(lp_player, "AP_Armory", false);
    TechTreeUnitAllow(lp_player, "AP_Starport", false);
    TechTreeUnitAllow(lp_player, "AP_FusionCore", false);
    TechTreeUnitAllow(lp_player, "AP_BarracksReactor", false);
    TechTreeUnitAllow(lp_player, "AP_FactoryReactor", false);
    TechTreeUnitAllow(lp_player, "AP_StarportReactor", false);
    TechTreeUnitAllow(lp_player, "AP_BarracksTechLab", false);
    TechTreeUnitAllow(lp_player, "AP_FactoryTechLab", false);
    TechTreeUnitAllow(lp_player, "AP_StarportTechLab", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryArmorsVanadiumPlatingLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranInfantryWeaponsUltraCapacitorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleArmorsVanadiumPlatingLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranVehicleWeaponsUltraCapacitorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipArmorsVanadiumPlatingLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsLevel3", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel1", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel2", false);
    TechTreeUpgradeAllow(lp_player, "AP_TerranShipWeaponsUltraCapacitorsLevel3", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_EMP", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("AP_UpgradeToPlanetaryFortress", 0), false);
}

void libABFE498B_gf_AP_Triggers_giveTerranDefaultTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_SiegeTech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_WraithCloak", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_BansheeCloak", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_YamatoCannon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_NovaBaseSuitEnhancements", 1);
}

void libABFE498B_gf_AP_Triggers_replaceUpgrade (int lp_player, string lp_oldUpgrade, string lp_newUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(lp_player, lp_oldUpgrade, c_techCountQueuedOrBetter) >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_oldUpgrade, 0);
        TechTreeUpgradeAllow(lp_player, lp_oldUpgrade, false);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_newUpgrade, 1);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_setOptions
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_setOptions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_gameSpeed;
    string lv_difficulty;
    string lv_genericUpgradeResearch;
    string lv_allInVariant;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameSpeed = "";
    lv_difficulty = "";
    lv_genericUpgradeResearch = "";
    lv_allInVariant = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libABFE498B_gt_AP_Triggers_techTreeInit, true, false);
    lv_difficulty = StringWord(EventChatMessage(false), 2);
    lv_genericUpgradeResearch = StringWord(EventChatMessage(false), 3);
    lv_allInVariant = StringWord(EventChatMessage(false), 4);
    lv_gameSpeed = StringWord(EventChatMessage(false), 5);
    libABFE498B_gf_AP_Triggers_setDifficulty(lv_gameSpeed, lv_difficulty);
    libABFE498B_gv_aP_Triggers_Option_genericUpgradeResearch = StringToInt(lv_genericUpgradeResearch);
    libABFE498B_gv_aP_Triggers_Option_allInMissionVariant = StringToInt(lv_allInVariant);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_setOptions_Init () {
    libABFE498B_gt_AP_Triggers_setOptions = TriggerCreate("libABFE498B_gt_AP_Triggers_setOptions_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_setOptions, c_playerAny, "?SetOptions", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_giveTerranTech
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_giveTerranTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    string lv_unitValue;
    string lv_upgradeValue;
    string lv_armory1Value;
    string lv_armory2Value;
    string lv_buildingValue;
    string lv_mercenaryValue;
    string lv_laboratoryValue;

    // Automatic Variable Declarations
    playergroup auto3377504F_g;

    // Variable Initialization
    lv_unitValue = "";
    lv_upgradeValue = "";
    lv_armory1Value = "";
    lv_armory2Value = "";
    lv_buildingValue = "";
    lv_mercenaryValue = "";
    lv_laboratoryValue = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitValue = StringWord(EventChatMessage(false), 2);
    lv_upgradeValue = StringWord(EventChatMessage(false), 3);
    lv_armory1Value = StringWord(EventChatMessage(false), 4);
    lv_armory2Value = StringWord(EventChatMessage(false), 5);
    lv_buildingValue = StringWord(EventChatMessage(false), 6);
    lv_mercenaryValue = StringWord(EventChatMessage(false), 7);
    lv_laboratoryValue = StringWord(EventChatMessage(false), 8);
    auto3377504F_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto3377504F_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libABFE498B_gf_AP_Triggers_unlockTerranUnits(lv_currentPlayer, StringToInt(lv_unitValue));
        libABFE498B_gf_AP_Triggers_unlockTerranUpgrades(lv_currentPlayer, StringToInt(lv_upgradeValue));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory1(lv_currentPlayer, StringToInt(lv_armory1Value));
        libABFE498B_gf_AP_Triggers_unlockTerranArmory2(lv_currentPlayer, StringToInt(lv_armory2Value));
        libABFE498B_gf_AP_Triggers_unlockTerranBuildings(lv_currentPlayer, StringToInt(lv_buildingValue));
        libABFE498B_gf_AP_Triggers_unlockTerranMercenaries(lv_currentPlayer, StringToInt(lv_mercenaryValue));
        libABFE498B_gf_AP_Triggers_unlockTerranLaboratory(lv_currentPlayer, StringToInt(lv_laboratoryValue));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_giveTerranTech_Init () {
    libABFE498B_gt_AP_Triggers_giveTerranTech = TriggerCreate("libABFE498B_gt_AP_Triggers_giveTerranTech_Func");
    TriggerAddEventChatMessage(libABFE498B_gt_AP_Triggers_giveTerranTech, c_playerAny, "?GiveTerranTech", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Triggers_techTreeInit
//--------------------------------------------------------------------------------------------------
bool libABFE498B_gt_AP_Triggers_techTreeInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto469AFECB_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto469AFECB_g = lib5BD4895D_gv_aP_Core_affectedPlayers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto469AFECB_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libABFE498B_gf_AP_Triggers_clearTerranTech(lv_currentPlayer);
        libABFE498B_gf_AP_Triggers_giveTerranDefaultTech(lv_currentPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libABFE498B_gt_AP_Triggers_techTreeInit_Init () {
    libABFE498B_gt_AP_Triggers_techTreeInit = TriggerCreate("libABFE498B_gt_AP_Triggers_techTreeInit_Func");
}

void libABFE498B_InitTriggers () {
    libABFE498B_gt_AP_Triggers_setOptions_Init();
    libABFE498B_gt_AP_Triggers_giveTerranTech_Init();
    libABFE498B_gt_AP_Triggers_techTreeInit_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libABFE498B_InitLib_completed = false;

void libABFE498B_InitLib () {
    if (libABFE498B_InitLib_completed) {
        return;
    }

    libABFE498B_InitLib_completed = true;

    libABFE498B_InitLibraries();
    libABFE498B_InitVariables();
    libABFE498B_InitCustomScript();
    libABFE498B_InitTriggers();
}

